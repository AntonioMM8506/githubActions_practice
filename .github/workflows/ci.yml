# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package 

#Everey time an event happens something will happen. In this case everytime that one pushes or pulls from
#main branch, something will happen.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

#One or more jobs, these are a sequence of tasks
#Steps can run commands, setup tasks or run an action
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    
    #to run on multiple environments
    #runs-on: ${{matrix.os}}
    #strategy:
      #matrix:
      #os: [ubuntu-latest, windows-latest, macOs-latest]

    steps:
    - uses: actions/checkout@v2 #uses: selects an action, under path "action/" the reusable code is hosted
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      #run: runs a command-line command
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: | #for multiple line in yaml
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    #to test the project with a .test file
    #- name: Test with pytest
      #run: |
        #pytest
    
    #DockerHub integration
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }} #in gitHub repo, got to Settings/Secrets
        password: ${{ secrets.DOCKER_PASSWORD }}
        tag_with_ref: true
        tag_with_sha: true
        add_git_labels: true
        always_pull: true
        
